name: Build immortalwrt_24.10

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: immortalwrt-24.10.config
  DIY_P1_SH: diy-immortalwrt-24.10.sh
  DIY_P2_SH: diy-immortalwrt-24.10.2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true
        
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Check server configuration
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT    
    
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -yqq install build-essential coreutils make python3 rsync curl wget libssl-dev zlib1g-dev gawk libncurses5-dev file ccache git
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        # 在自定义脚本后追加配置，确保不被覆盖
        echo "CONFIG_EFI_IMAGES=y" >> .config
        echo "CONFIG_TARGET_IMAGES_GZIP=n" >> .config
        echo "CONFIG_TARGET_IMAGES_EXT4FS=n" >> .config
        echo "CONFIG_VMDK_IMAGES=n" >> .config
        echo "CONFIG_ISO_IMAGES=n" >> .config

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec rm -f {} \;
        find dl -name "*.tmp" -exec rm -f {} \;
        find dl -name "*.cache" -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) image PROFILE="generic" FILES="files/" || make -j1 image PROFILE="generic" FILES="files/" || make -j1 V=s image PROFILE="generic" FILES="files/"
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DEVICE_NAME=_generic" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Clean up bin directory (remove packages)
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      run: |
        rm -rf openwrt/bin/targets/*/*/packages

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: immortalwrt_firmware_generic_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}/immortalwrt-x86-64-generic-squashfs-combined-efi.img.gz

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        mkdir -p firmware
        find . -type f -name '*squashfs-combined-efi.img.gz' -exec mv {} firmware/ \;
        echo "FIRMWARE=$PWD/firmware" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: immortalwrt_firmware_generic_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}/immortalwrt-x86-64-generic-squashfs-combined-efi.img.gz

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "RELEASE_TAG=immortalwrt-$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Delete releases and workflows runs
      uses: ophub/delete-releases-workflows@main
      with:
        delete_releases: true
        releases_keep_latest: 5
        delete_tags: true
        delete_workflows: true
        workflows_keep_day: 30
        gh_token: ${{ secrets.GITHUB_TOKEN }}
