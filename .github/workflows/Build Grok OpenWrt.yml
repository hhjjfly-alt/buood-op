#
# Copyright (c) 2019-2020 P3TERX <[invalid url, do not cite]
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build Grok x86_64 OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 24.10.config
  DIY_P1_SH: diy-24.10-part1.sh
  DIY_P2_SH: diy-24.10-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout
      uses: actions/checkout@main

  # - name: Set up Go  # <--- 新增：设置 Go 版本
  #   uses: actions/setup-go@v5
  #   with:
  #     go-version: '1.24.2'

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential bison flex libncursesw5-dev libssl-dev libelf-dev libmpc-dev libmpfr-dev libgmp3-dev gawk gcc-multilib gettext libtool patch python3 python3-distutils autoconf automake unzip subversion wget ccache pkgconf ninja-build rsync scons squashfs-tools swig upx-ucl libpython3-dev qemu-utils device-tree-compiler libreadline-dev libncurses5-dev zlib1g-dev libbz2-dev liblzma-dev libsqlite3-dev libpcre3-dev curl git
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
        /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules
        sudo timedatectl set-timezone "$TZ"
        sudo chown $USER:$GROUPS $GITHUB_WORKSPACE

    - name: Clone source code
      working-directory: ./
      run: |
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        echo "Current directory before operations: $(pwd)"
        ls -l
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        echo "Current directory after cd openwrt: $(pwd)"
        ls -l
        echo "Executing $DIY_P2_SH"
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8 V=s
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Clean build environment
      run: |
        cd openwrt
        make clean
        echo "Build environment cleaned."

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=s || make -j1 V=s
        if [ $? -eq 0 ]; then
          echo "Compile succeeded"
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        else
          echo "Compile failed"
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Debug directory structure
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt
        echo "Listing bin directory:"
        ls -l bin/ || echo "bin/ not found"
        echo "Listing bin/targets directory:"
        ls -l bin/targets/ || echo "bin/targets/ not found"
        echo "Listing bin/targets subdirectories:"
        ls -l bin/targets/*/* || echo "No subdirectories in bin/targets/"

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/x86/64
        echo "Listing contents of current directory:"
        ls -l
        EFI_IMAGE=$(find . -name "*generic*squashfs*combined*efi.img.gz" -type f)
        if [ -n "$EFI_IMAGE" ]; then
          echo "Found EFI image: $EFI_IMAGE"
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "Error: No EFI image found"
          ls -l
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}/*generic*squashfs*combined*efi.img.gz
